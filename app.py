import streamlit as st
import datetime
from config import (
    APP_TITLE,
    MODELS,
    RATE_LIMITS,
    DEFAULT_TEMPERATURE
)
from utils import (
    SYSTEM_PROMPT, 
    count_tokens, 
    estimate_cost, 
    generate_script,
    load_scripts, 
    save_scripts,
    load_script_versions,
    save_script_versions,
    create_message_from_context,
    get_context_parts,
    estimate_output_tokens
)

# –í–∫–ª—é—á–∞–µ–º wide mode –¥–ª—è Streamlit
st.set_page_config(
    page_title=APP_TITLE,
    page_icon="üìù",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Initialize session state
if "scripts_data" not in st.session_state:
    st.session_state.scripts_data = load_scripts()

if "current_script" not in st.session_state:
    st.session_state.current_script = None

if "script_versions" not in st.session_state:
    st.session_state.script_versions = []

if "active_tab" not in st.session_state:
    st.session_state.active_tab = 0

# App title and description
st.title(APP_TITLE)
#st.subheader(APP_DESCRIPTION)

# Sidebar for navigation and script selection
with st.sidebar:
    # –î–æ–±–∞–≤–ª—è–µ–º expander –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∫–∞–∫ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–∞–π–¥–±–∞—Ä–∞
    with st.expander("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ LLM"):
        default_temperature = st.slider(
            "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", 
            min_value=0.0, 
            max_value=1.0, 
            value=DEFAULT_TEMPERATURE,
            step=0.1,
            help="–ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–µ–ª–∞—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–æ–ª–µ–µ —Å–ª—É—á–∞–π–Ω—ã–º, –±–æ–ª–µ–µ –Ω–∏–∑–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–µ–ª–∞—é—Ç –µ–≥–æ –±–æ–ª–µ–µ —Ü–µ–ª–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –∏ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        system_prompt = st.text_area(
            "–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç",
            value=SYSTEM_PROMPT,
            height=200,
            help="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è AI, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –µ–≥–æ —Ä–æ–ª—å –∏ —Å—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
        )
    
    st.header("–°—Ü–µ–Ω–∞—Ä–∏–∏")
    
    # Create new script button
    if st.button("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π"):
        st.session_state.current_script = {
            "id": datetime.datetime.now().strftime("%Y%m%d%H%M%S"),
            "title": "–ù–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π",
            "brief": "",
            "created_at": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "updated_at": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        st.session_state.script_versions = []
        st.experimental_rerun()
        
    # List of existing scripts
    if st.session_state.scripts_data["scripts"]:
        st.subheader("–í–∞—à–∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏")
        for script in st.session_state.scripts_data["scripts"]:
            if st.button(f"{script['title']} ({script['created_at']})", key=f"btn_{script['id']}"):
                st.session_state.current_script = script
                
                # Load script versions
                st.session_state.script_versions = load_script_versions(script['id'])
                
                # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä–∞ –≤–µ—Ä—Å–∏—è–º, –µ—Å–ª–∏ —É –Ω–∏—Ö –µ—â–µ –Ω–µ—Ç –Ω–æ–º–µ—Ä–æ–≤
                for i, version in enumerate(st.session_state.script_versions):
                    if 'version_number' not in version:
                        version['version_number'] = i + 1
                
                st.experimental_rerun()

# Main content area
if st.session_state.current_script:
    script = st.session_state.current_script
    
    # Script details section
    st.header("–î–µ—Ç–∞–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è")
    
    # Title and brief summary inputs
    col1, col2 = st.columns([1, 3])
    
    with col1:
        new_title = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è", script["title"])
    
    with col2:
        new_brief = st.text_area("–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ", script["brief"], height=150, 
                              placeholder="–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∞—É–¥–∏–æ–∏—Å—Ç–æ—Ä–∏–∏ –∑–¥–µ—Å—å...")
    
    # Update script if changed
    if new_title != script["title"] or new_brief != script["brief"]:
        script["title"] = new_title
        script["brief"] = new_brief
        script["updated_at"] = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # Save to session state
        found = False
        for i, s in enumerate(st.session_state.scripts_data["scripts"]):
            if s["id"] == script["id"]:
                st.session_state.scripts_data["scripts"][i] = script
                found = True
                break
        
        if not found:
            st.session_state.scripts_data["scripts"].append(script)
            
        # Save to disk
        save_scripts(st.session_state.scripts_data)
    
    # Generate script section
    st.header("–°–æ–∑–¥–∞—Ç—å –≤–µ—Ä—Å–∏—é —Å—Ü–µ–Ω–∞—Ä–∏—è")
    
    # Model selection with info
    col1, col2, col3 = st.columns([3, 1, 1])
    
    with col1:
        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å gpt-4o-mini –∫–∞–∫ –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_model_index = list(MODELS.keys()).index("gpt-4o-mini") if "gpt-4o-mini" in MODELS else 0
        selected_model = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ AI –º–æ–¥–µ–ª—å", list(MODELS.keys()), index=default_model_index)
    
    with col2:
        st.markdown(f"**–ö–∞—á–µ—Å—Ç–≤–æ**: {MODELS[selected_model]['quality']}/100")
    
    with col3:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        temperature = st.slider(
            "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", 
            min_value=0.0, 
            max_value=1.0, 
            value=default_temperature,
            step=0.1
        )
    
    # Show model information
    st.markdown(f"""
    <div style='background-color: #f0f2f6; padding: 10px; border-radius: 5px;'>
        <small>
            <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏:</b> –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {format(MODELS[selected_model]['context_window'], ',')} —Ç–æ–∫–µ–Ω–æ–≤ |
            –°—Ç–æ–∏–º–æ—Å—Ç—å –≤–≤–æ–¥–∞: ${MODELS[selected_model]['input_cost']}/–ú —Ç–æ–∫–µ–Ω–æ–≤ |
            –°—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã–≤–æ–¥–∞: ${MODELS[selected_model]['output_cost']}/–ú —Ç–æ–∫–µ–Ω–æ–≤
        </small>
    </div>
    """, unsafe_allow_html=True)
    
    # Rate limits information
    if selected_model in RATE_LIMITS:
        with st.expander("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–º–∏—Ç–∞—Ö"):
            limits = RATE_LIMITS[selected_model]
            tpm = f"{limits.get('TPM', 'N/A'):,}" if isinstance(limits.get('TPM'), int) else limits.get('TPM', 'N/A')
            rpm = f"{limits.get('RPM', 'N/A'):,}" if isinstance(limits.get('RPM'), int) else limits.get('RPM', 'N/A')
            tpd = f"{limits.get('TPD', 'N/A'):,}" if isinstance(limits.get('TPD'), int) else limits.get('TPD', 'N/A')
            rpd = f"{limits.get('RPD', 'N/A'):,}" if isinstance(limits.get('RPD'), int) else limits.get('RPD', 'N/A')
            
            st.markdown(f"""
            - **–¢–æ–∫–µ–Ω–æ–≤ –≤ –º–∏–Ω—É—Ç—É (TPM)**: {tpm}
            - **–ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É (RPM)**: {rpm}
            - **–¢–æ–∫–µ–Ω–æ–≤ –≤ –¥–µ–Ω—å (TPD)**: {tpd}
            - **–ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å (RPD)**: {rpd}
            """)
    
    # Context selection for regeneration
    include_brief = True  # Always include brief
    
    # Include previous versions if they exist
    selected_versions = []
    if st.session_state.script_versions:
        with st.expander("–í–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–µ—Ä—Å–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç"):
            if st.session_state.script_versions:
                # –°—Ç–∏–ª—å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
                st.markdown("""
                <style>
                .version-table {
                    border-collapse: collapse;
                    margin: 10px 0;
                    font-size: 0.9em;
                    width: 100%;
                }
                .version-table th {
                    background-color: #f0f2f6;
                    color: #262730;
                    font-weight: bold;
                    text-align: left;
                    padding: 8px;
                }
                .version-table td {
                    padding: 8px;
                    border-bottom: 1px solid #e1e4e8;
                }
                /* –°—Ç–∏–ª–∏ –¥–ª—è –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã */
                .st-emotion-cache-1v0mbdj > div {
                    margin-top: 0 !important;
                    margin-bottom: 0 !important;
                    padding-top: 2px !important;
                    padding-bottom: 2px !important;
                }
                /* –£–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –≤ markdown */
                .st-emotion-cache-1v0mbdj p {
                    margin-top: 0 !important;
                    margin-bottom: 0 !important;
                    line-height: 1.2 !important;
                }
                /* –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –Ω–∞—à–µ–π –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ */
                div[style*="background-color"] {
                    padding-top: 0px !important;
                    padding-bottom: 0px !important;
                    margin-top: 0px !important;
                    margin-bottom: 0px !important;
                }
                </style>
                """, unsafe_allow_html=True)
                
                # Create a custom table-like interface with checkboxes
                st.markdown("<p style='margin: 0 0 5px 0; font-size: 0.9em;'>–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏–∏ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç:</p>", unsafe_allow_html=True)
                
                # Header row
                col1, col2, col3, col4, col5, col6 = st.columns([0.5, 1.5, 1, 1, 1, 1])
                with col1:
                    st.markdown("<small><strong>#</strong></small>", unsafe_allow_html=True)
                with col2:
                    st.markdown("<small><strong>–î–∞—Ç–∞</strong></small>", unsafe_allow_html=True)
                with col3:
                    st.markdown("<small><strong>–ú–æ–¥–µ–ª—å</strong></small>", unsafe_allow_html=True)
                with col4:
                    st.markdown("<small><strong>–†–∞–∑–º–µ—Ä</strong></small>", unsafe_allow_html=True)
                with col5:
                    st.markdown("<small><strong>–¢–æ–∫–µ–Ω—ã</strong></small>", unsafe_allow_html=True)
                with col6:
                    st.markdown("<small><strong>‚úì</strong></small>", unsafe_allow_html=True)
                
                # Divider - –¥–µ–ª–∞–µ–º —Ç–æ–Ω–∫—É—é –ª–∏–Ω–∏—é
                st.markdown('<hr style="margin: 0; padding: 0; height: 1px; border: none; background-color: #e1e4e8;">', unsafe_allow_html=True)
                
                # Data rows
                for i, version in enumerate(st.session_state.script_versions):
                    timestamp = version.get('timestamp', 'No date')
                    model = version.get('model', 'Unknown')
                    content_length = len(version.get('content', ''))
                    tokens = version.get('input_tokens', 0)
                    cost = version.get('estimated_cost', 0)
                    
                    # Row with alternating background color
                    bg_color = "#f8f9fa" if i % 2 == 0 else "white"
                    st.markdown(f'<div style="background-color: {bg_color}; padding: 1px 0;">', unsafe_allow_html=True)
                    
                    col1, col2, col3, col4, col5, col6 = st.columns([0.5, 1.5, 1, 1, 1, 1])
                    
                    with col1:
                        st.markdown(f"<small>**{i+1}**</small>", unsafe_allow_html=True)
                    with col2:
                        st.markdown(f"<small>{timestamp}</small>", unsafe_allow_html=True)
                    with col3:
                        st.markdown(f"<small>{model}</small>", unsafe_allow_html=True)
                    with col4:
                        st.markdown(f"<small>{content_length//100}00 —Å–∏–º–≤.</small>", unsafe_allow_html=True)
                    with col5:
                        st.markdown(f"<small>{format(tokens, ',')}</small>", unsafe_allow_html=True)
                    with col6:
                        if st.checkbox("", key=f"v_{i}"):
                            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏ –≤ –æ–±—ä–µ–∫—Ç –≤–µ—Ä—Å–∏–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
                            version_with_number = version.copy()
                            version_with_number['version_number'] = i+1  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –Ω–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏
                            selected_versions.append(version_with_number)
                    
                    st.markdown('</div>', unsafe_allow_html=True)
    
    # User prompt input
    user_prompt = st.text_area("–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è", height=100, 
                          placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: '–°–¥–µ–ª–∞–π—Ç–µ –µ–≥–æ –±–æ–ª–µ–µ –¥—Ä–∞–º–∞—Ç–∏—á–Ω—ã–º, —Å –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω—ã–º–∏ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–º–∏ –∞–∫—Ü–µ–Ω—Ç–∞–º–∏ –∏ —á–µ—Ç–∫–∏–º–∏ —Ä–∞–∑–ª–∏—á–∏—è–º–∏ –º–µ–∂–¥—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏'")
    
    # Token counting and cost estimation
    if user_prompt:
        # Create messages and context parts for display
        messages = create_message_from_context(system_prompt, script['brief'], selected_versions, user_prompt)
        context_parts = get_context_parts(script['brief'], selected_versions, user_prompt)
        
        # Count tokens and estimate cost
        full_prompt = " ".join([m["content"] for m in messages])
        input_tokens = count_tokens(full_prompt, selected_model)
        
        # Estimate output tokens based on brief length
        estimated_output_tokens = estimate_output_tokens(len(script["brief"]))
        
        # Calculate cost
        estimated_cost = estimate_cost(input_tokens, estimated_output_tokens, selected_model)
        
        # Display token info and cost in a metrics container
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("–í—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã", format(input_tokens, ','), f"–û—Å—Ç–∞–ª–æ—Å—å {format(MODELS[selected_model]['context_window'] - input_tokens, ',')}")
        
        with col2:
            st.metric("–û—Ü–µ–Ω–∫–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤", format(estimated_output_tokens, ','))
        
        with col3:
            st.metric("–û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏", f"${estimated_cost:.4f}")
        
        # Warning if exceeding context window
        if input_tokens > MODELS[selected_model]["context_window"]:
            st.error(f"‚ö†Ô∏è –í–≤–æ–¥ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–æ–¥–µ–ª–∏ –≤ {format(MODELS[selected_model]['context_window'], ',')} —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–º–µ–Ω—å—à–∏—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç.")
        
        # Show context parts
        with st.expander("–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"):
            for part in context_parts:
                st.subheader(part["type"])
                st.text_area(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ {part['type']}", part["content"][:500] + ("..." if len(part["content"]) > 500 else ""), height=100, disabled=True)
                st.text(f"–¢–æ–∫–µ–Ω–æ–≤: {format(count_tokens(part['content'], selected_model), ',')}")
                st.divider()
        
        # Generate button
        if st.button("–°–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π", type="primary", disabled=input_tokens > MODELS[selected_model]["context_window"]):
            if input_tokens <= MODELS[selected_model]["context_window"]:
                with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–∏–Ω—É—Ç—É."):
                    try:
                        # –ü–µ—Ä–µ–¥–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ —Ñ—É–Ω–∫—Ü–∏—é generate_script
                        generated_script = generate_script(messages, selected_model, temperature)
                        
                        # Save the new version
                        new_version = {
                            "timestamp": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                            "model": selected_model,
                            "temperature": temperature,
                            "prompt": user_prompt,
                            "content": generated_script,
                            "input_tokens": input_tokens,
                            "estimated_cost": estimated_cost,
                            "context": [p["type"] for p in context_parts],
                            "version_number": len(st.session_state.script_versions) + 1  # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏
                        }
                        
                        st.session_state.script_versions.append(new_version)
                        
                        # Save versions to disk
                        save_script_versions(script['id'], st.session_state.script_versions)
                        
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é (–Ω–æ–≤—É—é) –≤–µ—Ä—Å–∏—é
                        st.session_state.active_tab = len(st.session_state.script_versions) - 1
                        
                        st.success("–°—Ü–µ–Ω–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
                        st.experimental_rerun()
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è: {str(e)}")
            else:
                st.error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π: –≤–≤–æ–¥ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤.")
    
    # View script versions
    if st.session_state.script_versions:
        st.header("–í–µ—Ä—Å–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º CSS-—Å—Ç–∏–ª–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ markdown –æ–¥–∏–Ω —Ä–∞–∑ –ø–µ—Ä–µ–¥ —Ü–∏–∫–ª–æ–º
        st.markdown("""
        <style>
        .markdown-container {
            max-height: 400px; 
            overflow-y: auto; 
            border: 1px solid #e6e9ef; 
            border-radius: 0.25rem; 
            padding: 1rem; 
            background-color: white;
        }
        </style>
        """, unsafe_allow_html=True)
        
        tab_titles = [f"–í–µ—Ä—Å–∏—è {i+1}" for i in range(len(st.session_state.script_versions))]
        tabs = st.tabs(tab_titles)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ active_tab –∏–∑ session_state –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
        # Streamlit –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É, –Ω–∞–º –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å
        st.session_state.active_tab = min(st.session_state.active_tab, len(tabs) - 1)
        
        for i, (tab, version) in enumerate(zip(tabs, st.session_state.script_versions)):
            with tab:
                col1, col2 = st.columns([3, 1])
                
                with col1:
                    st.subheader("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏")
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ –≤ –≤—ã–≤–æ–¥
                    temp_info = f" (–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {version.get('temperature', DEFAULT_TEMPERATURE)})" if 'temperature' in version else ""
                    st.markdown(f"""
                    - **–î–∞—Ç–∞:** {version.get('timestamp', '–ù–µ—Ç –¥–∞—Ç—ã')}
                    - **–ú–æ–¥–µ–ª—å:** {version.get('model', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}{temp_info}
                    - **–¢–æ–∫–µ–Ω–æ–≤:** {format(version.get('input_tokens', 0), ',')}
                    - **–°—Ç–æ–∏–º–æ—Å—Ç—å:** ${version.get('estimated_cost', 0):.4f}
                    - **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:** {', '.join(version.get('context', ['–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ']))}
                    """)
                
                with col2:
                    # Download button
                    timestamp = version.get("timestamp", "").replace(" ", "_").replace(":", "-")
                    download_filename = f"{script['title'].replace(' ', '_')}_{timestamp}.txt"
                    
                    st.download_button(
                        label="–°–∫–∞—á–∞—Ç—å —ç—Ç—É –≤–µ—Ä—Å–∏—é",
                        data=version.get("content", ""),
                        file_name=download_filename,
                        mime="text/plain",
                        key=f"download_{i}"
                    )
                
                st.subheader("–ó–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è")
                st.info(version.get("prompt", "–ó–∞–ø—Ä–æ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"))
                
                st.subheader("–°–æ–∑–¥–∞–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ü–µ–Ω–∞—Ä–∏–π
                content = version.get("content", "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
                
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º HTML-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                st.markdown('<div class="markdown-container">', unsafe_allow_html=True)
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∫ markdown (–±–µ–∑–æ–ø–∞—Å–Ω–æ, —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
                st.markdown(content)
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º HTML-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                st.markdown('</div>', unsafe_allow_html=True)

# Initial greeting if no script is selected
else:
    st.write("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
    
    st.markdown("""
    ## –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    
    1. **–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π** —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    2. **–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ** –≤–∞—à–µ–π –∞—É–¥–∏–æ–∏—Å—Ç–æ—Ä–∏–∏
    3. **–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ** –≤ –≤–∞—à–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–µ
    4. **–°–æ–∑–¥–∞–π—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π** —Å –ø–æ–º–æ—â—å—é AI –º–æ–¥–µ–ª–∏
    5. **–£–ª—É—á—à–∞–π—Ç–µ –≤–∞—à —Å—Ü–µ–Ω–∞—Ä–∏–π** —Å–æ–∑–¥–∞–≤–∞—è –Ω–æ–≤—ã–µ –≤–µ—Ä—Å–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
    6. **–°–∫–∞—á–∞–π—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π** –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    
    –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—Å–µ –≤–µ—Ä—Å–∏–∏, —Ç–∞–∫ —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤–æ–±–æ–¥–Ω–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å!
    """)
    
    # Feature overview
    st.subheader("–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("### ü§ñ –° –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ò–ò")
        st.markdown("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ—â–Ω—ã–µ —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ OpenAI –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞—É–¥–∏–æ—Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")
    
    with col2:
        st.markdown("### üìù –ö–æ–Ω—Ç—Ä–æ–ª—å –≤–µ—Ä—Å–∏–π")
        st.markdown("–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –≤—Å–µ –≤–µ—Ä—Å–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏ –∑–∞–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è")
    
    with col3:
        st.markdown("### üí∞ –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏")
        st.markdown("–û—Ü–µ–Ω–∏–≤–∞–π—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API") 